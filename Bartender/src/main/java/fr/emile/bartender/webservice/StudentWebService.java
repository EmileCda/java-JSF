
package fr.emile.bartender.webservice;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "StudentWebService", targetNamespace = "http://webservice.dove.emile.fr/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface StudentWebService {


    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<fr.emile.bartender.webservice.CreateStudentResponse>
     */
    @WebMethod(operationName = "createStudent")
    @RequestWrapper(localName = "createStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.CreateStudent")
    @ResponseWrapper(localName = "createStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.CreateStudentResponse")
    public Response<CreateStudentResponse> createStudentAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Student arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createStudent")
    @RequestWrapper(localName = "createStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.CreateStudent")
    @ResponseWrapper(localName = "createStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.CreateStudentResponse")
    public Future<?> createStudentAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Student arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateStudentResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns fr.emile.bartender.webservice.Student
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.CreateStudent")
    @ResponseWrapper(localName = "createStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.CreateStudentResponse")
    @Action(input = "http://webservice.dove.emile.fr/StudentWebService/createStudentRequest", output = "http://webservice.dove.emile.fr/StudentWebService/createStudentResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://webservice.dove.emile.fr/StudentWebService/createStudent/Fault/Exception")
    })
    public Student createStudent(
        @WebParam(name = "arg0", targetNamespace = "")
        Student arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<fr.emile.bartender.webservice.ReadStudentListResponse>
     */
    @WebMethod(operationName = "readStudentList")
    @RequestWrapper(localName = "readStudentList", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentList")
    @ResponseWrapper(localName = "readStudentListResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentListResponse")
    public Response<ReadStudentListResponse> readStudentListAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "readStudentList")
    @RequestWrapper(localName = "readStudentList", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentList")
    @ResponseWrapper(localName = "readStudentListResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentListResponse")
    public Future<?> readStudentListAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReadStudentListResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<fr.emile.bartender.webservice.Student>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "readStudentList", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentList")
    @ResponseWrapper(localName = "readStudentListResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentListResponse")
    @Action(input = "http://webservice.dove.emile.fr/StudentWebService/readStudentListRequest", output = "http://webservice.dove.emile.fr/StudentWebService/readStudentListResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://webservice.dove.emile.fr/StudentWebService/readStudentList/Fault/Exception")
    })
    public List<Student> readStudentList()
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<fr.emile.bartender.webservice.ReadStudentByIdResponse>
     */
    @WebMethod(operationName = "readStudentById")
    @RequestWrapper(localName = "readStudentById", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentById")
    @ResponseWrapper(localName = "readStudentByIdResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentByIdResponse")
    public Response<ReadStudentByIdResponse> readStudentByIdAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "readStudentById")
    @RequestWrapper(localName = "readStudentById", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentById")
    @ResponseWrapper(localName = "readStudentByIdResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentByIdResponse")
    public Future<?> readStudentByIdAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReadStudentByIdResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns fr.emile.bartender.webservice.Student
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "readStudentById", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentById")
    @ResponseWrapper(localName = "readStudentByIdResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.ReadStudentByIdResponse")
    @Action(input = "http://webservice.dove.emile.fr/StudentWebService/readStudentByIdRequest", output = "http://webservice.dove.emile.fr/StudentWebService/readStudentByIdResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://webservice.dove.emile.fr/StudentWebService/readStudentById/Fault/Exception")
    })
    public Student readStudentById(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<fr.emile.bartender.webservice.UpdateStudentResponse>
     */
    @WebMethod(operationName = "updateStudent")
    @RequestWrapper(localName = "updateStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.UpdateStudent")
    @ResponseWrapper(localName = "updateStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.UpdateStudentResponse")
    public Response<UpdateStudentResponse> updateStudentAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Student arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateStudent")
    @RequestWrapper(localName = "updateStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.UpdateStudent")
    @ResponseWrapper(localName = "updateStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.UpdateStudentResponse")
    public Future<?> updateStudentAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Student arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateStudentResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns int
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.UpdateStudent")
    @ResponseWrapper(localName = "updateStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.UpdateStudentResponse")
    @Action(input = "http://webservice.dove.emile.fr/StudentWebService/updateStudentRequest", output = "http://webservice.dove.emile.fr/StudentWebService/updateStudentResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://webservice.dove.emile.fr/StudentWebService/updateStudent/Fault/Exception")
    })
    public int updateStudent(
        @WebParam(name = "arg0", targetNamespace = "")
        Student arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<fr.emile.bartender.webservice.DeleteStudentResponse>
     */
    @WebMethod(operationName = "deleteStudent")
    @RequestWrapper(localName = "deleteStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.DeleteStudent")
    @ResponseWrapper(localName = "deleteStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.DeleteStudentResponse")
    public Response<DeleteStudentResponse> deleteStudentAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteStudent")
    @RequestWrapper(localName = "deleteStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.DeleteStudent")
    @ResponseWrapper(localName = "deleteStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.DeleteStudentResponse")
    public Future<?> deleteStudentAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteStudentResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns int
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.DeleteStudent")
    @ResponseWrapper(localName = "deleteStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.DeleteStudentResponse")
    @Action(input = "http://webservice.dove.emile.fr/StudentWebService/deleteStudentRequest", output = "http://webservice.dove.emile.fr/StudentWebService/deleteStudentResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://webservice.dove.emile.fr/StudentWebService/deleteStudent/Fault/Exception")
    })
    public int deleteStudent(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<fr.emile.bartender.webservice.HardDeleteStudentResponse>
     */
    @WebMethod(operationName = "hardDeleteStudent")
    @RequestWrapper(localName = "hardDeleteStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.HardDeleteStudent")
    @ResponseWrapper(localName = "hardDeleteStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.HardDeleteStudentResponse")
    public Response<HardDeleteStudentResponse> hardDeleteStudentAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "hardDeleteStudent")
    @RequestWrapper(localName = "hardDeleteStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.HardDeleteStudent")
    @ResponseWrapper(localName = "hardDeleteStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.HardDeleteStudentResponse")
    public Future<?> hardDeleteStudentAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<HardDeleteStudentResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns int
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hardDeleteStudent", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.HardDeleteStudent")
    @ResponseWrapper(localName = "hardDeleteStudentResponse", targetNamespace = "http://webservice.dove.emile.fr/", className = "fr.emile.bartender.webservice.HardDeleteStudentResponse")
    @Action(input = "http://webservice.dove.emile.fr/StudentWebService/hardDeleteStudentRequest", output = "http://webservice.dove.emile.fr/StudentWebService/hardDeleteStudentResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://webservice.dove.emile.fr/StudentWebService/hardDeleteStudent/Fault/Exception")
    })
    public int hardDeleteStudent(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0)
        throws Exception_Exception
    ;

}
